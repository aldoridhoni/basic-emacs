#+TITLE: Emacs configuration
#+AUTHOR: Aldo Ridhoni
#+STARTUP: indent content hidestars
#+PROPERTY: header-args :tangle config.el

* Initial configuration
** Sane setup
- Set variables
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        require-final-newline t
        initial-scratch-message nil
        inhibit-startup-echo-area-message nil
        delete-trailing-lines nil
        visible-bell t
        server-name "basic"
        warning-minimum-level :emergency)
#+END_SRC

- Disable backup
#+BEGIN_SRC emacs-lisp
  (setq backup-inhibited t
        make-backup-files nil)
#+END_SRC

- Move backup directory to temporary folder.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,temporary-file-directory)))
#+END_SRC

- GC treshold
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 10000000)
#+END_SRC

- Cursor type to bar
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type (quote bar))
#+END_SRC

- Hide menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

- Hide tool bar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

- Hide scroll bar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+END_SRC

- Line highlighting
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

- Line Number
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'display-line-numbers-mode)
      (progn
        (add-hook 'prog-mode-hook #'display-line-numbers-mode)
        (add-hook 'text-mode-hook #'display-line-numbers-mode)
        (setq display-line-numbers-type 'visual))
    (global-linum-mode t))
#+END_SRC

- Auto refresh file form disk
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

- Window selection in cardinal direction with <shift> key.
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

- Enable Reveal mode
#+BEGIN_SRC emacs-lisp
  (global-reveal-mode t)
#+END_SRC

- Auto insert closing bracket
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

- Turn on bracket match highlight
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

- Save minibuffer history
#+BEGIN_SRC emacs-lisp
  (savehist-mode t)
  (setq savehist-file (expand-file-name (concat user-emacs-directory "history")))
#+END_SRC

- Display 'lambda' as 'Î»'
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

- Indent with space
Learn to space not tab.
[[https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces][pep8]]
[[https://blog.codinghorror.com/death-to-the-space-infidels/][codinghorror.com]]

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+END_SRC

- Change yes/no to y/n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

- Change tramp default protocol to ssh
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

- Always follow symbolic link
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

- Dots per inch resolution 400, eg viewing PDF file.
#+BEGIN_SRC emacs-lisp
  (setq doc-view-resolution 400)
#+END_SRC

- Move all auto-save file to single auto-save folder.
#+BEGIN_SRC emacs-lisp
    (let ((auto-save-folder (expand-file-name
                             (file-name-as-directory
                              (concat user-emacs-directory "auto-save")))))
      (unless (file-exists-p auto-save-folder)
        (make-directory auto-save-folder))
      (setq auto-save-file-name-transforms `((".*" ,auto-save-folder t)))
      (setq tramp-auto-save-directory auto-save-folder))
#+END_SRC

- Fix auto-save-list-file-prefix
#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix (expand-file-name auto-save-list-file-prefix))
#+END_SRC

- Overwrite selected text
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

- Trust all custom theme
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC

- Set frame-title. Read [[https://www.emacswiki.org/emacs/FrameTitle][emacswiki]].
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format
        '(""
         (buffer-file-name "%f"
                           (dired-directory dired-directory "%b"))
          " - " "Basic Emacs " emacs-version))
#+END_SRC

- Imenu
#+BEGIN_SRC emacs-lisp
  (setq imenu-auto-rescan t)
#+END_SRC

- Snake game
#+BEGIN_SRC emacs-lisp
  (setq snake-height (floor (- (frame-height) 3))
        snake-buffer-height (+ snake-height 2)
        snake-width (floor (/ (frame-width) 4))
        snake-buffer-width snake-width
        snake-score-y snake-height)
#+END_SRC
** Home folder hacks
There were two scenarios to think about. First emacs is started from out start.sh script. Second if dot emacs folder is symlink to basic emacs dot emacs folder.
- User home folder
Use tilde to get user home dir.
#+BEGIN_SRC emacs-lisp
  (defconst user-home-dir (file-name-as-directory
                   (expand-file-name "~/")))
  (defconst user-emacs-directory (expand-file-name user-emacs-directory))
  (defconst user-init-file (expand-file-name "init.el" user-emacs-directory))
#+END_SRC

- Get real user home directory
#+BEGIN_SRC emacs-lisp
   (defconst user-home-real-dir
     (cond
      ((getenv "REAL_HOME")
       (file-name-as-directory (getenv "REAL_HOME")))
      ((getenv "HOME")
       (file-name-as-directory (getenv "HOME")))
      (t user-home-dir)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun abbreviate-file-name (filename) filename)
#+END_SRC
** Mode Line
- Set variables
#+BEGIN_SRC emacs-lisp
  ;;(require 'dash)
  ;;(setq-default mode-line-modes (-remove
  ;;                               #'(lambda (x) (or (equal x "(") (equal x ")")))
  ;;                               mode-line-modes))
  (setq-default mode-line-format
                '("%e"
                  mode-line-front-space
                  (vc-mode vc-mode)
                  "   "
                  mode-line-mule-info
                  mode-line-client
                  mode-line-modified
                  ;; mode-line-remote
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  "  "
                  mode-line-modes
                  mode-line-misc-info
                  mode-line-position
                  mode-line-end-spaces))
#+END_SRC

- Clean position info
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (setq mode-line-position '((line-number-mode ("%l" (column-number-mode ":%c")))))
#+END_SRC

- I dont know
#+BEGIN_SRC emacs-lisp
  ;;(let ((el (cadr mode-line-modes)))
  ;;  (and (listp el)
  ;;        (equal (car el) :propertize)
  ;;        (equal (cadr el) '("" mode-name))
  ;;   (setf (cadr el) '("" "[%[" mode-name "%]]"))))
#+END_SRC
* Packages
** Meta Package - Package
Initialize ~package.el~.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC
** Fetch packages-list
#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p package-user-dir)
    (package-refresh-contents))
#+END_SRC

** Install use-packages
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+END_SRC
** Quelpa
Bootstrap quelpa.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'quelpa)
      (with-temp-buffer
        (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
        (eval-buffer)
        (quelpa-self-upgrade)))

  (setq quelpa-update-melpa-p nil)
  (setq quelpa-checkout-melpa-p nil)
#+END_SRC

Now integrate with ~use-package~.
#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package
    :config
    (quelpa-use-package-activate-advice)
    (setq use-package-ensure-function 'use-package-ensure-elpa))
#+END_SRC
** External Lisp
- Variables
#+BEGIN_SRC emacs-lisp
  (defvar config-site-lisp "site-lisp")
  (defvar config-private-directory "private")
#+END_SRC

- Create ~site-lisp~ and ~private~ directory.
#+BEGIN_SRC emacs-lisp
  (unless (file-directory-p (concat user-emacs-directory config-site-lisp))
    (make-directory (concat user-emacs-directory config-site-lisp)))
  (unless (file-directory-p (concat user-emacs-directory config-private-directory))
    (make-directory (concat user-emacs-directory config-private-directory)))
#+END_SRC

-  Add ~site-lisp~ to load path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory config-site-lisp))
#+END_SRC

- Load from private directory
#+BEGIN_SRC emacs-lisp
  (defun config/_loadprivate (file)
    "Load FILE from private directory."
    (let ((lisp-file
           (expand-file-name file (concat user-emacs-directory config-private-directory))))
      (message lisp-file)
      (when (file-exists-p lisp-file) (load lisp-file))))
  (config/_loadprivate "pre-private.el")
#+END_SRC

- Downloader simple lisp code and put in ~site-lisp~ directory.
#+BEGIN_SRC emacs-lisp
  (defun config/_downloader (url filename &optional force autoload)
      (let ((file (expand-file-name filename (concat user-emacs-directory config-site-lisp))))
        (require 'url)
        (with-demoted-errors "%S" (url-copy-file url file force))
        (and autoload
             (file-exists-p file)
             (load file))))
#+END_SRC

- thingatpt+.el
#+BEGIN_SRC emacs-lisp
  (quelpa '(thingatpt+ :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/thingatpt+.el" :stable nil :update nil :version original))
#+END_SRC

- strings.el
#+BEGIN_SRC emacs-lisp
  (quelpa '(strings :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/strings.el" :stable nil :update nil :version original))
#+END_SRC

- misc-fns.el
#+BEGIN_SRC emacs-lisp
  (quelpa '(misc-fns :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/misc-fns.el" :stable nil :update nil :version original))
#+END_SRC

- fira-code.el
#+BEGIN_SRC emacs-lisp
  (config/_downloader "https://gist.githubusercontent.com/alphapapa/0d38f082e609ed059cc7f2ed9caa7e3d/raw/288f922a56451f9fb096a1514684d232241fdcda/init.el" "fira-code.el")
#+END_SRC

- pragmatapro-prettify-symbols.el
#+BEGIN_SRC emacs-lisp
  (config/_downloader "https://github.com/fabrizioschiavi/pragmatapro/raw/master/emacs_snippets/pragmatapro-prettify-symbols-v0.829.el" "pragmatapro-prettify-symbols.el")
#+END_SRC

** Bundled packages
- dired
#+BEGIN_SRC emacs-lisp
  (require 'dired)
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-popup-type 'minibuffer)
    (which-key-idle-delay 0.4)
    :config
    (which-key-mode t))
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (helm-mode)
    (setq helm-ff-file-name-history-use-recentf t
          help-window-select t
          helm-display-header-line nil
          helm-autoresize-mode 1
          helm-split-window-inside-p t)
    (defvar helm-source-header-default-background
      (face-attribute 'helm-source-header :background))
    (defvar helm-source-header-default-foreground
      (face-attribute 'helm-source-header :foreground))
    (defvar helm-source-header-default-box
      (face-attribute 'helm-source-header :box))
    (defvar helm-source-header-default-height
      (face-attribute 'helm-source-header :height))
    :bind(("M-x" . helm-M-x)
          ("<menu>" . helm-M-x)
          ("C-x b" . helm-mini)
          ("C-x C-f" . helm-find-files)))
#+END_SRC

- Hide line-number
#+BEGIN_SRC emacs-lisp
  (add-hook 'helm-mode-hook
            (lambda ()
              (if (fboundp 'display-line-numbers-mode)
                  (display-line-numbers-mode -1)
                (linum-mode -1))))
#+END_SRC

- Helm descbind
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :requires helm
    :config
    (helm-descbinds-mode)
    (setq helm-descbinds-window-style 'split))
#+END_SRC

- Helm find-file keymap
`<tab>` for entering or opening.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm-files
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-find-files-map
      (kbd "S-<tab>") 'helm-find-files-up-one-level)
    (define-key helm-find-files-map
      (kbd "<backtab>") 'helm-find-files-up-one-level)
    ;; For terminal.
    (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
    (define-key helm-find-files-map
      (kbd "S-TAB") 'helm-find-files-up-one-level)
    (define-key helm-map (kbd "C-z") 'helm-select-action))
#+END_SRC

** Multi-term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :custom
    (multi-term-program "bash")
    (multi-term-buffer-name "shell* *")
    (multi-term-default-dir 'user-home-real-dir)
    (multi-term-dedicated-select-after-open-p t)
#+END_SRC

- Keybind for dedicated window
#+BEGIN_SRC emacs-lisp
  :bind ("<f1>" . multi-term-dedicated-toggle)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  )
#+END_SRC

** libvterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :disabled
    :if (memq system-type '(darwin gnu/linux berkeley-unix)))
#+END_SRC

- Vterm in multi-term = multi-vterm
#+BEGIN_SRC emacs-lisp
  (use-package multi-vterm
    :disabled
    :requires (vterm))
#+END_SRC

** Editorconfig
- For reading .editorconfig file
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+END_SRC
** Zoom-frm
- frame-fns and frame-cmds.
#+BEGIN_SRC emacs-lisp
  (use-package frame-fns
    :quelpa ((frame-fns :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/frame-fns.el") :stable nil :update nil :version original))

  (use-package frame-cmds
    :quelpa ((frame-cmds :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/frame-cmds.el") :stable nil :update nil :version original))
#+END_SRC

- Zoom frame.
#+BEGIN_SRC emacs-lisp
  (use-package zoom-frm
    :requires (frame-fns frame-cmds)
    :quelpa ((zoom-frm :fetcher url :url "https://github.com/emacsmirror/emacswiki.org/raw/master/zoom-frm.el") :stable nil :update nil :version original)
    :bind (("C-x C-+" . zoom-in/out)
           ("C-x C--" . zoom-in/out)
           ("C-x C-=" . zoom-in/out)
           ("C-x C-0" . zoom-in/out)))
#+END_SRC
** Magit
- Magit the magic git toolbox for emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-save-repository-buffers 'dontask
          magit-auto-revert-mode t)
    :bind (("C-x g" . magit-status)
           ("C-x M-g" . magit-dispatch)))
#+END_SRC

** Restart Emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :config
    (defalias 'r 'restart-emacs)
    (when (file-exists-p
           (expand-file-name "start.sh" user-home-dir))
      (defun restart-emacs--start-gui-using-sh (&optional args)
        (call-process
         (expand-file-name "start.sh" user-home-dir)
         nil 0 nil))))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :defer t)
  (use-package monokai-theme
    :defer t)
#+END_SRC

- Rainbow mode for highlight color-codes
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC
** Smart Mode Line
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :disabled
    :init
    (setq sml/show-eol t)
    (setq sml/theme nil)
    :config 
    (sml/setup)
    :hook (window-setup . sml/setup))
#+END_SRC
** Telephone Line
- Telephone Line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :if (display-graphic-p)
    :config
    (telephone-line-defsegment* space () " ")
    (setq telephone-line-lhs
          '((accent . (telephone-line-vc-segment
                       telephone-line-process-segment))
            (nil    . (telephone-line-projectile-segment
                       space
                       telephone-line-buffer-segment))))
    (setq telephone-line-primary-left-separator 'telephone-line-gradient
          telephone-line-secondary-left-separator 'telephone-line-flat
          telephone-line-primary-right-separator 'telephone-line-gradient
          telephone-line-secondary-right-separator 'telephone-line-flat)
    (setq telephone-line-separator-extra-padding 2)
    (telephone-line-mode 1))
#+END_SRC
** NeoTree
- Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :disabled
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-smart-open t)
    :bind (("<f8>" . neotree-toggle)))
#+END_SRC
** Treemacs
- Treemacs
#+BEGIN_SRC emacs-lisp 
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (treemacs-follow-mode t)
    :bind (("<f8> " . treemacs)))
#+END_SRC

- Projectile,dired & magit
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC
** All-the-icons
- all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts)))
#+END_SRC

- all-the-icons-dired
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :requires all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
** Flycheck
- Flycheck : On the fly syntax checking.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (defvaralias 'flycheck-python-pylint-executable 'python-shell-interpreter)
    (defvaralias 'flycheck-python-flake8-executable 'python-shell-interpreter)
    :hook (prog-mode . flycheck-mode))
#+END_SRC
** Projectile
- Configuration
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode)
    (setq projectile-enable-caching t
          projectile-keymap-prefix (kbd "C-c p")
          projectile-switch-project-action 'neotree-projectile-action)
    (add-to-list 'projectile-globally-ignored-directories "node-modules")
    (add-to-list 'projectile-globally-ignored-directories "__pycache__"))
#+END_SRC

- Helm integration, =C-c p h=
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :requires (helm projectile)
    :init
    (helm-projectile-on)
    :config
    (setq projectile-completion-system 'helm)
    (setq projectile-switch-project-action 'helm-projectile))
#+END_SRC

** Company
- Company: Complete Anything, completion framework.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :after (lsp-mode)
    :config
    (setq company-tooltip-limit 20)
    (setq company-tooltip-align-annotations 't)
    (setq company-idle-delay .0)
    (setq company-minimum-prefix-length 1)
    (setq company-begin-commands '(self-insert-command))
    :hook (lsp-mode . company-mode))
#+END_SRC

- company-box: company with icons
  #+begin_src emacs-lisp
    (use-package company-box
      :requires (company)
      :hook (company-mode . company-box-mode))
  #+end_src
** Elfeed
- Feed reader for emacs, call with ~elfeed~.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :config
    :disabled
    (setq elfeed-feeds (quote ("http://xkcd.com/rss.xml")))
    (config/_loadprivate "elfeed-feed.el"))
#+END_SRC
** Imenu-list
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :bind (("C-M-_" . imenu-list-smart-toggle))
    :config
    (setq imenu-list-focus-after-activation t
          imenu-list-auto-resize nil))
#+END_SRC
** Ws-butler
Be smarter about deleting trailing whitespace.
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode))
#+END_SRC
** Spotify
- Spot4e
Spotify for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package spot4e
    :quelpa ((spot4e :fetcher github :repo "chiply/spot4e" ))
    :disabled
    :config
    (config/_loadprivate "spot4e-refresh-token.el")
    (when (boundp 'spot4e-refresh-token)
      (run-with-timer 0 (* 60 59) 'spot4e-refresh)))
#+END_SRC

- Spotify.el
Client ID and Client secret variable stored in private/spotify.el.
Call command ~global-spotify-remote-mode~.
#+BEGIN_SRC emacs-lisp
  (use-package spotify
    :disabled
    :unless (memq system-type '(windows-nt cygwin))
    :quelpa ((spotify :fetcher github :repo "danielfm/spotify.el") :upgrade nil)
    :init
    (when (fboundp 'dbus-interface-dbus)
      (setq spotify-transport 'dbus))
    (config/_loadprivate "spotify.el")
    :config
    (define-key spotify-mode-map (kbd "C-c .") 'spotify-command-map))
#+END_SRC
** Kodi-remote
Remote for Kodi Media Player.
#+BEGIN_SRC emacs-lisp
  (use-package kodi-remote
    :init
    (setq kodi-host-name "osmc.local"))
#+END_SRC
** Basic Menu
- Load
#+BEGIN_SRC emacs-lisp
  (use-package basic-menu
    :if (display-graphic-p)
    :load-path "lisp"
    :config
    (require 'treemacs)
    (menu-bar-mode t))
#+END_SRC

- Reload
#+BEGIN_SRC emacs-lisp
  (defun config/reload-basic-menu ()
    (interactive)
    (load "basic-menu"))
#+END_SRC
* Programming Language
** Golang Mode
- go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode ("\\.go\\'" . go-mode)
    :init
    (add-hook 'go-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'gofmt-before-save))))
#+END_SRC

** Python Mode
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python3" . python-mode)
    :custom
    (py-python-command "python3")
    (python-shell-interpreter "python3")
    (python-indent-offset 4))
#+END_SRC

- Goggle yapf fix syntax formatting.
#+BEGIN_SRC emacs-lisp
  (use-package yapfify
    :hook (python-mode . yapf-mode))
#+END_SRC

- Add keybinding for F12 key. Mainly for simple python scripts.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "python"
    (define-key python-mode-map
      (kbd "<f12>")
      (lambda ()
        (interactive)
        (run-python)
        (python-shell-send-buffer)
        (python-shell-switch-to-shell))))
#+END_SRC

- Virtualenv
#+BEGIN_SRC elisp
  (use-package pyvenv)
#+END_SRC
*** Anaconda Mode
- Enable anaconda-mode and eldoc
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :requires (python)
    :config
    (setq anaconda-mode-installation-directory
          (expand-file-name anaconda-mode-installation-directory))
    :hook ((python-mode . anaconda-mode)
           (python-mode . anaconda-eldoc-mode)))
#+END_SRC

- Integrate with company
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :requires (anaconda-mode company)
    :config
    (push 'company-anaconda company-backends))
#+END_SRC

Mostly using lsp-mode now, see LSP section below.
** Rust Mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
#+END_SRC
** Markdown Mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "markdown"
                markdown-css-paths '("https://github.com/markdowncss/modest/raw/master/css/modest.css"))
    :hook (markdown-mode . imenu-add-menubar-index))
#+END_SRC
** Web Development
*** Javascript Mode
- Using js2-mode from Steve Yedge.
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode (("\\.js\\'" . js2-mode)
           ("\\.jsx?\\'" . js2-jsx-mode)))
#+END_SRC
*** Typescript Mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC
*** Sass scss-mode
- Download binary from [[https://github.com/sass/dart-sass/releases][github]] and put into somewhere in $PATH e.g ~/bin
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :config
    (setq scss-saas-command "saas")
    :mode "\\.scss\\'")
#+END_SRC
*** Emmet
- Emmet expand css like syntax to html, Eg. ~div.class~ to ~<div class="class"></div>~.
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :mode "\\.html\\'")
#+END_SRC
*** Web Mode
- Hilite js and css inside html file. 
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.html\\'")
#+END_SRC

* Language Server Protocol
- LSP using client server protocol. Originally part of MS Visual Studio Code editor. [[https://github.com/emacs-lsp/lsp-mode][github repo]].
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :pin melpa-stable
    :init (setq lsp-keymap-prefix "C-c l")
    :hook ((html-mode . lsp)
           (css-mode . lsp)
           (python-mode . lsp)))
#+END_SRC

For python we need to install `pip install "python-lsp-server[yapf]"`.

- lsp-ui : blue documentation overlay box.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :pin melpa-stable
    :requires (lsp-mode)
    :commands lsp-ui-mode)
#+END_SRC

- helm-lsp
#+begin_src emacs-lisp
  (use-package helm-lsp
    :pin melpa-stable
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
    :commands helm-lsp-workspace-symbol)
#+end_src

- treemacs integration
  #+begin_src emacs-lisp
    (use-package lsp-treemacs
      :pin melpa-stable
      :config
      (lsp-treemacs-sync-mode 1)
      :commands lsp-treemacs-errors-list)
  #+end_src
* Org-mode
** Set variables
#+BEGIN_SRC emacs-lisp
  (setq org-directory (file-name-as-directory
                       (concat user-home-real-dir "org"))
        org-reverse-note-order t
        org-export-with-section-numbers nil
        org-export-with-toc nil
        org-hide-leading-stars t
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-src-fontify-natively t
        org-startup-indented t
        org-bullets-mode 1
        org-return-follows-link t
        org-M-RET-may-split-line nil)

  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

- Org agenda
=C-,= to cycle thru all org file in agenda folder (org-cycle-agenda-files)
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 14
        org-agenda-files (file-expand-wildcards (concat org-directory "*.org"))
        org-agenda-prefix-format "  %-17:c%?-12t% s"
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t)
#+END_SRC

- Org Export
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-creator nil)
#+END_SRC

- Org Babel
Menjalankan org-src dan menuliskan keluarannya di file tersebut. Default key C-c C-c.
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages 'org-babel-load-languages
        '((python . t)
          (gnuplot . t)
          (emacs-lisp . t)
          (shell . t)
          (org . t)))
#+END_SRC

** Org bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Level remove bold
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              "Stop the org-level headers from increasing in height relative to the other text."
              (dolist (face '(org-level-1
                              org-level-2
                              org-level-3
                              org-level-4
                              org-level-5))
                (set-face-attribute face nil :weight 'normal :height 1.0))))
#+END_SRC

** Org Src
- Remove flycheck in org-src-mode for emacs-lisp-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-src-mode-hook
            (lambda ()
              (when (equal major-mode 'emacs-lisp-mode)
                (remove-hook 'prog-mode-hook #'flycheck-mode t)
                (when (fboundp 'flycheck-mode) (flycheck-mode -1)))))
#+END_SRC
* Other Modes
** Fish
- Fish shell
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC
** Zone
- Zoning after 240min, turn off with 'zone-leave-me-alone
#+BEGIN_SRC emacs-lisp
  (require 'zone)
  (zone-when-idle (* 240 60))
#+END_SRC
** Mutt
- Enable mail mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("/mutt" . mail-mode))
#+END_SRC
* Eshell
** Configuration
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :config
    (setq eshell-scroll-to-bottom-on-input 'all
          eshell-error-if-no-glob t
          eshell-hist-ignoredups t
          eshell-save-history-on-exit t
          eshell-prefer-lisp-functions nil
          eshell-destroy-buffer-when-process-dies t
          eshell-cmpl-cycle-completions nil
          eshell-cmpl-dir-ignore
          "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'"))
#+END_SRC
** Visual Executeables
- Need special display - will run in term buffer.
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :init
    (add-hook 'eshell-mode-hook
              (lambda ()
                (add-to-list 'eshell-visual-commands "ssh")
                (add-to-list 'eshell-visual-commands "tail")
                (add-to-list 'eshell-visual-commands "top")
                (add-to-list 'eshell-visual-options
                             '("git" "--help" "--paginate"))
                (add-to-list 'eshell-visual-subcommands
                             '("git" "log" "diff" "show")))))
#+END_SRC

** Aliases
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :init
    (add-hook 'eshell-mode-hook
              (lambda ()
                (eshell/alias "e" "find-file $1")
                (eshell/alias "ff" "find-file $1")
                (eshell/alias "emacs" "find-file $1")
                (eshell/alias "ee" "find-file-other-window $1")
                (eshell/alias "d" "dired $1")
                (eshell/alias "c" "eshell/clear $1"))))
#+END_SRC

** Clear
#+BEGIN_SRC emacs-lisp
  (defun eshell/cls ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
#+END_SRC
* Setting Keybindings
** Clipboard
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-v") 'clipboard-yank)
#+END_SRC
** Insert Line Before
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-o") 'config/insert-line-before)
#+END_SRC

** Aliases
- Start of line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-a") 'back-to-indentation)
#+END_SRC

** Edit this file kbd
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'config/edit-config-file)
#+END_SRC

** Kill current buffer
- Kill current buffer F9.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f9>") 'kill-this-buffer)
#+END_SRC

** Other buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'mode-line-other-buffer)
#+END_SRC
* Custom Functions
** Real =HOME= wrapper
#+BEGIN_SRC emacs-lisp
  (defun config/wrap-real-home (fn &optional n)
    "Wraps FN function with arg N in real HOME."
    (setenv "HOME" user-home-real-dir)
    (funcall fn n)
    (setenv "HOME" user-home-dir))
#+END_SRC
** Fish in multi-term
#+BEGIN_SRC emacs-lisp
  (defun config/fish-term ()
    (interactive)
    (let ((multi-term-program "fish")
          (multi-term-buffer-name "fish* *"))
      (multi-term)))
#+END_SRC

- Hook for term-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook
            (lambda ()
              (setq term-buffer-maximum-size 10000)
              (setq show-trailingwhitespace nil)
              (define-key term-raw-map (kbd "C-y") 'term-paste))
            (if (fboundp 'display-line-numbers-mode)
                (display-line-numbers-mode -1)
              (linum-mode -1)))
#+END_SRC

- Kill term buffer when process exit
#+BEGIN_SRC emacs-lisp
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+END_SRC

** Edit this file
#+BEGIN_SRC emacs-lisp
  (defun config/edit-config-file ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

** Compile (tangle) this file
#+BEGIN_SRC emacs-lisp
  (defun config/tangle-config-file ()
    (interactive)
    (let ((file (expand-file-name "config.org" user-emacs-directory)))
      (org-babel-tangle-file
       file
       (concat (file-name-sans-extension file) ".el")
       "emacs-lisp")))
#+END_SRC
** Open =org-directory=
#+BEGIN_SRC emacs-lisp
  (defun config/dired-org-dir ()
    (interactive)
    (dired org-directory))
#+END_SRC
** Insert new line before
- Keybind at C-S-o. Kinda inverse of open-line C-o. Can be called with universal argument C-u.
#+BEGIN_SRC emacs-lisp
  (defun config/insert-line-before (times)
    (interactive "p")
    (save-excursion
     (move-beginning-of-line 1)
     (newline times)))
#+END_SRC
** Indent
#+BEGIN_SRC emacs-lisp
  (defun config/infer-indentation-style ()
    "Use file indent style.

  If our source file use tabs, we use tabs.
  if spaces spaces, and if neither, we use the current indent-tabs-mode."
    (let ((space-count (how-many "^  " (point-min) (point-max)))
          (tab-count (how-many "^\t" (point-min) (point-max))))
      (if (> space-count tab-count) (setq indent-tabs-mode nil))
      (if (> tab-count space-count) (setq indent-tabs-mode t))))
#+END_SRC
** Sudo edit
- Stolen from [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][emacsredux.com]].
#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

  With a prefix ARG prompt for a file to visit.
  Will also prompt for a file to visit if current
  buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo::"
                           (helm-read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo::" buffer-file-name))))
#+END_SRC
** Duplicate line
#+BEGIN_SRC emacs-lisp
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key(kbd "C-S-d") 'duplicate-line)
#+END_SRC
** Cycle buffers
- Next and Previous buffer
#+BEGIN_SRC emacs-lisp
  (setq useful-buffers-regexp '("\\*scratch\\*"))
  (setq useless-buffers-regexp '("*\.\+"))

  (defun _config/useful-buffer-p (buffer)
    (let ((buf-name (buffer-name buffer)))
      (or
       (cl-loop for useful-regexp in useful-buffers-regexp
                thereis (string-match-p useful-regexp buf-name))
       (cl-loop for useless-regexp in useless-buffers-regexp
                never (string-match-p useless-regexp buf-name))
       (with-current-buffer buffer
         (derived-mode-p 'comint-mode)))))

  (defun _config/useless-buffer-p (buffer)
    (not (_config/useful-buffer-p buffer)))

  (defun _config/change-buffer (action)
    (interactive)
    (let ((start-buffer (buffer-name)))
      (funcall action)
      (while
          (and
           (_config/useless-buffer-p (current-buffer))
           (not (equal start-buffer (buffer-name))))
        (funcall action))))

  (defun _config/next-buffer ()
    (interactive)
    (_config/change-buffer 'next-buffer))

  (defun _config/previous-buffer ()
    (interactive)
    (_config/change-buffer 'previous-buffer))
#+END_SRC

- Remap command and set keybind following setup-keys.el with [pause] / [break] key
#+BEGIN_SRC emacs-lisp
  (global-set-key [remap next-buffer] '_config/next-buffer)
  (global-set-key [remap previous-buffer] '_config/previous-buffer)
  (global-set-key [M-pause] 'next-buffer)
  (global-set-key [C-pause] 'previous-buffer)
#+END_SRC

- Add list of useful buffers
#+BEGIN_SRC emacs-lisp
  (push "\\*fish\\*\.\+" useful-buffers-regexp)
  (push "\\*ssh\\*\*" useful-buffers-regexp)
  (push "\\*tmux\\*\*" useful-buffers-regexp)
  (push "\\*Group\\*\*" useful-buffers-regexp)
  (push "\\*eww\\*\*" useful-buffers-regexp)
  (push "\\*\\(ansi-term\\|eshell\\|shell\\|terminal.+\\)\\(-[0-9]+\\)?\\*" useful-buffers-regexp)
#+END_SRC
** Empty Kill ring
#+BEGIN_SRC emacs-lisp
  (defun config/empty-killring ()
    (interactive)
    (progn
      (setq kill-ring nil)
      (garbage-collect)))
#+END_SRC
** Open current file in eww & xwidget webkit
- Emacs Web Wowser
#+BEGIN_SRC emacs-lisp
  (defun config/open-buffer-in-eww ()
    (interactive)
    (eww (concat "file://" buffer-file-truename)))
#+END_SRC

- Xwidget Webkit
#+BEGIN_SRC emacs-lisp
  (defun config/open-buffer-in-xwidget-webkit ()
    (interactive)
    (xwidget-webkit-browse-url
     (concat "file://" buffer-file-truename)))
#+END_SRC
** Theme
- Append lisp folder custom-theme-load-path so we can load basic-theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "lisp"))
#+END_SRC

- Settings
#+BEGIN_SRC emacs-lisp
  (defcustom dark-theme-enable nil
    "Set non nil turn on dark-theme at startup")

  (defcustom basic/dark-theme 'monokai nil)

  (defcustom basic/light-theme 'basic nil)
#+END_SRC

- Dark theme
#+BEGIN_SRC emacs-lisp
  (defun basic/dark-theme ()
    "Set theme to value of `basic/dark-theme'."
    (interactive)
    (let ((enabled
           (if (get 'basic/dark-theme 'enabled)
               (get 'basic/dark-theme 'enabled)
             nil)))
      (if (not enabled)
          (progn
            (message "Switching to dark theme")

            (put 'basic/dark-theme 'enabled t)
            (put 'basic/light-theme 'enabled nil)

            (dolist (theme custom-enabled-themes)
              (disable-theme theme))

            (load-theme basic/dark-theme t))

        (user-error "Already in dark theme"))))
#+END_SRC

- Light theme
#+BEGIN_SRC emacs-lisp
  (defun basic/light-theme ()
    "Set theme to value of `basic/light-theme'."
    (interactive)
    (let ((enabled
           (if (get 'basic/light-theme 'enabled)
               (get 'basic/light-theme 'enabled)
             nil)))
      (if (not enabled)
          (progn
            (message "Switching to light theme")

            (put 'basic/light-theme 'enabled t)
            (put 'basic/dark-theme 'enabled nil)

            (dolist (theme custom-enabled-themes)
              (disable-theme theme))

            (load-theme basic/light-theme t))

        (user-error "Already in light theme"))))
#+END_SRC

- Toggle theme
#+BEGIN_SRC emacs-lisp
  (defun config/__theme-toggle ()
    (condition-case signal
        (basic/dark-theme)
      (user-error (basic/light-theme))))
#+END_SRC

- Enable dark-theme based on time of launch at 6pm.
#+BEGIN_SRC emacs-lisp
  (defun config/__time-based-theme ()
    (let ((now (string-to-number (format-time-string "%H"))))
      (if (or (>= now 18) (<= now 6))
           (ignore-errors (basic/dark-theme))
           (ignore-errors (basic/light-theme)))))
#+END_SRC

- Run theme timer
#+BEGIN_SRC emacs-lisp
  (defvar config/__theme-timer nil)

  (defun config/__theme-run-timer ()
      (setq config/__theme-timer
            (run-with-timer (* 30 60) (* 30 60) 'config/__time-based-theme)))

  (defun config/__theme-cancel-timer ()
      (cancel-timer config/__theme-timer))
#+END_SRC
** CTAGS
Using ctags, preferebly from ctags.io

- Dont ask about reload TAGS File
#+BEGIN_SRC emacs-lisp
  (setq tags-revert-without-query 1)
#+END_SRC

- Create new TAGS file.
#+BEGIN_SRC emacs-lisp
  (setq path-to-ctags "/usr/local/bin/ctags")

  (defun create-tags (dir-name)
      "Create tags file."
      (interactive "DDirectory: ")
      (shell-command
       (format "%s -f TAGS -e -R %s" path-to-ctags (directory-file-name dir-name))))
#+END_SRC
* Hooks
** Programming modes
- Infer indentation
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'config/infer-indentation-style)
#+END_SRC
** Other

- Dired-x
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-load-hook
            (lambda () (load "dired-x")))
#+END_SRC

* Macro
- kmacro-name-last-macro --> Mx insert-kbd-macro
** Duplicate line
#+BEGIN_SRC emacs-lisp
(fset 'dups
   (lambda (&optional arg) "Keyboard macro." (interactive "p")
(kmacro-exec-ring-item (quote ([5 67108896 1 134217847 5 return 25] 0 "%d")) arg)))
#+END_SRC
* Platform Specific
** FreeBSD
- Multi-term default to sh
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'berkeley-unix)
    (setq multi-term-program "sh"))
#+END_SRC
** macOS aka OSX aka Mac OS X aka darwin
- Command key as Meta
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)
#+END_SRC

- Multi-term default to ZSH
#+BEGIN_SRC emacs-lisp
  (setq multi-term-program "zsh")
#+END_SRC

- TODO: nreverse exec-path
#+BEGIN_SRC emacs-lisp
  )
#+END_SRC
** MS Windows
- HOME default to $APPDATA, change to $USEPROFILE or $HOMEPATH
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq user-home-real-dir (file-name-as-directory
                             (getenv "USERPROFILE")))
#+END_SRC

- Tramp on Windows
#+BEGIN_SRC emacs-lisp
      (setq putty-directory (file-name-directory
                             (concat user-home-real-dir "Downloads/putty/")))
      (setq tramp-default-method "plink")
      (when (and (not (string-match putty-directory (getenv "PATH")))
             (file-directory-p putty-directory))
        (setenv "PATH" (concat putty-directory ";" (getenv "PATH")))
        (add-to-list 'exec-path putty-directory))
      )

#+END_SRC
* X Window
** Do something if in graphic mode
- Set font function.
#+BEGIN_SRC emacs-lisp
  (defun config/__set-font (&optional force)
      ;; load Fira Code Ligatures
      (when
          (member "Fira Code Symbol" (font-family-list))
        (load "fira-code")
        (message "Loading Fira Code Ligatures"))

      ;; load PragmataPro Ligatures
      (when
          (member "PragmataPro" (font-family-list))
        (load "pragmatapro-prettify-symbols")
        (add-hook 'text-mode-hook 'prettify-hook)
        (add-hook 'prog-mode-hook 'prettify-hook)
        (remove-hook 'prog-mode-hook 'add-fira-code-symbol-keywords))

      ;; set frame font
      (let ((default-font
              (cond
               ((find-font (font-spec :name "PragmataPro Liga" :style "Regular"))
                "PragmataPro Liga-12")
               ((member "Input" (font-family-list))
                "Input-12")
               ((member "Source Code Pro" (font-family-list))
                "Source Code Pro-11")
               ((member "Inconsolata" (font-family-list))
                "Inconsolata-11")
               ((member "DejaVu Sans Mono" (font-family-list))
                "DejaVu Sans Mono-11")
               ((member "Menlo" (font-family-list))
                "Menlo-11")
               (t
                "monospace-12"))))

        (when (or force
                  (not (assoc 'font default-frame-alist)))
          (set-frame-font default-font t t)
          (add-to-list 'default-frame-alist `(font . ,default-font))
          (message "Setting font to %s" default-font))))
#+END_SRC

- Maximize or fullscreen frame, set font, change theme.
#+BEGIN_SRC emacs-lisp
  (defun config/_in_display_graphic ()
    (when (display-graphic-p)
      ;; Maximize initial frame
      (setq frame-resize-pixelwise t)
      (add-to-list 'initial-frame-alist '(fullscreen . maximized))
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
      ;; (toggle-frame-maximized)

      ;;macOS
      (when (featurep 'cocoa) (toggle-frame-fullscreen))

      (config/__set-font)
      (config/__time-based-theme)
      (config/__theme-run-timer)
      (config/_loadprivate "post-private.el")))
#+END_SRC

- Startup hook.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (config/_in_display_graphic)))
#+END_SRC

- Hook when new frame created.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (message "New frame %S" frame)
              (config/_in_display_graphic)))
#+END_SRC

** Starting server
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
        (lambda ()
           (require 'server)
           (unless (server-running-p server-name)
             (condition-case nil
                 (server-start)
               (error nil)))))
#+END_SRC
** MOTD
#+BEGIN_SRC emacs-lisp
  (defun basic/motd ()
    (message "This too shall pass"))

  (add-hook 'window-setup-hook 'basic/motd)
 #+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; ends here
#+END_SRC
